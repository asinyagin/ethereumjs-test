var async = require('async');
var VM = require('ethereumjs-vm');
var Account = require('ethereumjs-account');
var Block = require('ethereumjs-block');
var Transaction = require('ethereumjs-tx');
var Trie = require('merkle-patricia-tree');
var SHA3Hash = require('sha3').SHA3Hash;

var accountAddress = 'cd2a3d9f938e13cd947ec05abc7fe734df8dd826';
var accountKey = 'cow';

var code = '606060405260405160208061043783395060806040525160008054600160a060020a0319163317808255600160a060020a03168152600160208190526040909120556002805460ff8316808355919082908015829011607e57818360005260206000209182019101607e91905b8082111560915760008155600101606c565b50505050506103a2806100956000396000f35b509056606060405260e060020a60003504635c19a95c811461003c578063609ff1bd146100705780639e7b8d61146100e2578063b3f98adc1461012e575b005b61003a600435600160a060020a033316600090815260016020819052604082209081015490919060ff161561019d5761032d565b610170600080805b60025460ff8216101561037d5781600260005082815481101561000257600091909152600080516020610382833981519152015411156100da576002805482908110156100025760008051602061038283398151915201549193509091508290505b600101610078565b61003a600435600054600160a060020a0390811633919091161415806101245750600160a060020a0381166000908152600160208190526040909120015460ff165b1561017d5761019a565b61003a600435600160a060020a03331660009081526001602081905260409091209081015460ff1680610166575060025460ff831610155b1561033257610379565b60ff166060908152602090f35b600160a060020a0381166000908152600160208190526040909120555b50565b5b600160a060020a03838116825260408220600101546201000090041681148015906101eb575060408120600160a060020a0384811683526001919091015462010000900481163390911614155b15610232576001600050600084600160a060020a0316815260200190815260200160002060005060010160029054906101000a9004600160a060020a03169250825061019e565b33600160a060020a031683600160a060020a031614156102515761032d565b60018260010160006101000a81548160ff02191690830217905550828260010160026101000a815481600160a060020a03021916908302179055506001600050600084600160a060020a0316815260200190815260200160002060005090508060010160009054906101000a900460ff161561031157816000016000505460026000508260010160019054906101000a900460ff16815481101561000257600091909152600080516020610382833981519152018054909101905561032d565b8160000160005054816000016000828282505401925050819055505b505050565b6001818101805460ff191690911761ff0019166101008402179055805460028054849081101561000257506000526000805160206103828339815191528301805490910190555b5050565b50509056405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace000000000000000000000000000000000000000000000000000000000000000a';
code = new Buffer(code, 'hex');

async.waterfall([
  createVM,
  createAccount,
  createTx,
  runTx
], function(err, result) {
  if (err) console.error(err);
  console.log('tx: ' + result);
});

async.waterfall([
  createVM,
  createAccount,
  createTx,
  runBlock
], function(err, result) {
  if (err) console.error(err);
  console.log('block: ' + result);
});


function createVM(cb) {
  cb(null, { vm: new VM(new Trie(), null, { activatePrecompiles: true }) });
}

function createAccount(params, cb) {
  var account = new Account();
  account.balance = 'f00000000000000001';
  params.vm.trie.put(
    new Buffer(accountAddress, 'hex'), account.serialize(),
    function(err) {
      cb(err, params);
    }
  );
}

function createTx(params, cb) {
  var tx = new Transaction({
    data: code,
    gasLimit: 3000000,
    gasPrice: 1
  });
  tx.sign(new Buffer(sha3(accountKey), 'hex'));

  params.tx = tx;
  cb(null, params);
}

function runTx(params, cb) {
  params.vm.runTx({ tx: params.tx }, function(err, result) {
    if (err) console.error(err);
    else cb(null, result.gasUsed.toString(16));
  });
}

function runBlock(params, cb) {
  var block = new Block({
    header: {
      coinbase: new Buffer('1337133713371337133713371337133713371337', 'hex'),
      gasLimit: 30000000,
      number: 0,
      timestamp: 10000000000000,
      difficulty: new Buffer('1337133713371337133713371337133713371337', 'hex')
    },
    transactions: [params.tx],
    uncleHeaders: []
  });
  params.vm.runBlock({ block: block, generate: true }, function(err, results) {
    if (err) console.error(err);
    else cb(null, results.receipts[0].gasUsed.toString('hex'));
  });
}

function sha3(str) {
  var sha = new SHA3Hash(256);
  sha.update(str);
  return sha.digest('hex');
}
